/**
 * Asynchronously loads and parses JSON data for a polytope.
 * @param {string} filename - The name of the JSON file (e.g., "cube.json").
 * @param {string} basePath - The base path to the polytopes directory.
 * @returns {Promise<object|null>} A promise that resolves with the parsed polytope data object,
 *                                 or null if loading or parsing fails.
 */
export async function loadPolytopeData(filename, basePath = './polytopes/') {
    const url = `${basePath}${filename}`;
    console.log(`Attempting to load: ${url}`);
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`);
        }
        const data = await response.json();
        console.log(`Successfully loaded and parsed: ${filename}`);
        // Basic validation (optional but good practice)
        if (!data.vertices || !data.faces) {
             console.error("Loaded data is missing 'vertices' or 'faces' property.");
             return null;
        }
        return data;
    } catch (error) {
        console.error(`Failed to load or parse polytope data from ${url}:`, error);
        return null; // Return null to indicate failure
    }
}
